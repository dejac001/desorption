&io
    file_struct ='input_struc.xyz'
    io_output   = 2
    run_num     = 1
    suffix      = 'a'
    L_movie_xyz = F
 /

 &system
    lnpt         = T
    lgibbs       = T
    lgrand       =  F
    lanes        =  F
    lvirial      =  F
    lmipsw       =  F
    lexpee       =  F
    ldielect     =  F
    lpbc         = T
    lpbcx        = T
    lpbcy        = T
    lpbcz        = T
    lfold        = T
    lijall       =  F
    lchgall      =  F
    lewald       = T
    lcutcm       = T
    ltailc       = T
    lshift       =  F
    ldual        = T
    L_Coul_CBMC  = T
    lneigh       =  F
    lexzeo       =  F
    lslit        =  F
    lgraphite    =  F
    lsami        =  F
    lmuir        =  F
    lelect_field =  F
    lgaro        =  F
    lionic       =  F
    L_Ewald_Auto = T
    lmixlb       = T
    lmixjo       =  F
    L_spline     =  F
    L_linear     =  F
    L_vib_table  =  F
    L_bend_table =  F
    L_elect_table =  F
 /
!
 &zeolite_in
    file_zeocoord           ='zeolite.cif'
    dgr                     = 0.1d0
    file_ztb                ='zeolite.ztb'
    n_pieces_ztb            = 40
    requiredPrecision       = 0.01d0
    num_points_interpolation= 4
    upperLimit              = 1.0d5
    ltailcZeo               = T
    ltestztb                = F
    lpore_volume            = F
    volume_probe            = 124
    volume_nsample          = 40000
    lsurface_area           = F
    area_probe              = 124
    area_nsample            = 5000
 /

ATOMS
!i type(i) epsi(i) sigi(i) q(i) mass(i) chemid(i) chname(i) [Angstrom, Kelvin, a.u.]; type 1: Lennard-Jones
  1 1  148.0000  3.73000  0.0000  16.0430000 C   #Tr-UA CH4 alkane
177 1   22.0000  2.30000  1.5000  28.0855000 Si  #TraPPE-zeo Si
178 1   53.0000  3.30000 -0.7500  15.9990000 O   #TraPPE-zeo O
END ATOMS

NONBOND
!i j type(ij) epsi(ij) sigi(ij) [Angstrom, Kelvin, a.u.]; type 1: Lennard-Jones
END NONBOND

BONDS
!i type(i) brvib(i) brvibk(i) [Angstrom]; type 1: U = brvibk * ( r_ij - brvib ) ^ 2
END BONDS

ANGLES
!i type(i) brben(i) brbenk(i) [degree]; type 1: U = brbenk * ( theta_ijk - brben ) ^ 2 [radian]
END ANGLES

DIHEDRALS
!i type(i) vtt0(i) vtt1(i) vtt2(i) vtt3(i); !!!check vtorso.f, calctor.f!!!
!===Begin TraPPE-UA alkane===
END DIHEDRALS
